import * as XLSX from "xlsx";
import { FaFileExcel } from "react-icons/fa";

export const ExcelReportButtonExcelAdmin = ({ users, currentUser }) => {
  const generateExcel = () => {
    const date = new Date();
    const adminName = currentUser?.username || "Admin";

    // ===== METADATA WORKSHEET =====
    const metaData = [
      ["USER MANAGEMENT REPORT"],
      [],
      ["Report Information"],
      ["Generated by:", adminName],
      ["Date:", date.toLocaleDateString()],
      ["Time:", date.toLocaleTimeString()],
      ["Total Users:", users.length],
      [],
      ["User Data"],
    ];

    // ===== USER DATA WORKSHEET =====
    const userData = users.map((user, index) => ({
      "No.": index + 1,
      Username: user.username,
      Email: user.email,
      Admin: user.isAdmin ? "YES" : "NO",
      "Join Date": XLSX.SSF.format("yyyy-mm-dd", new Date(user.createdAt)),
      Status: "Active",
    }));

    // Create workbook
    const wb = XLSX.utils.book_new();

    // Add metadata sheet with improved layout
    const metaWS = XLSX.utils.aoa_to_sheet(metaData);

    // Format metadata sheet
    metaWS["!cols"] = [
      { wch: 15 }, // Left column
      { wch: 20 }, // Right column
    ];

    XLSX.utils.book_append_sheet(wb, metaWS, "Report Info");

    // Add data sheet with better formatting
    const dataWS = XLSX.utils.json_to_sheet(userData, {
      header: ["No.", "Username", "Email", "Admin", "Join Date", "Status"],
      skipHeader: false,
    });

    // Set column widths to match PDF layout
    dataWS["!cols"] = [
      { wch: 5 }, // No.
      { wch: 20 }, // Username
      { wch: 30 }, // Email
      { wch: 10 }, // Admin
      { wch: 12 }, // Join Date
      { wch: 10 }, // Status
    ];

    // Add filter to headers
    dataWS["!autofilter"] = { ref: "A1:F1" };

    // Freeze header row
    dataWS["!views"] = [{ state: "frozen", ySplit: 1 }];

    // Add conditional formatting for Admin column (YES/NO colors)
    if (!dataWS["!conditionalFormats"]) dataWS["!conditionalFormats"] = [];
    dataWS["!conditionalFormats"].push({
      ref: "D2:D1000", // Admin column
      rules: [
        {
          type: "containsText",
          operator: "containsText",
          text: "YES",
          style: {
            fill: { fgColor: { rgb: "C6EFCE" } },
            font: { color: { rgb: "006100" } },
          },
        },
        {
          type: "containsText",
          operator: "containsText",
          text: "NO",
          style: {
            fill: { fgColor: { rgb: "FFC7CE" } },
            font: { color: { rgb: "9C0006" } },
          },
        },
      ],
    });

    XLSX.utils.book_append_sheet(wb, dataWS, "User Data");

    // Add footer note sheet
    const footerWS = XLSX.utils.aoa_to_sheet([
      [],
      ["Confidential - System Generated Report"],
      [`Generated on ${date.toLocaleString()}`],
    ]);
    XLSX.utils.book_append_sheet(wb, footerWS, "Footer");

    // Export file
    XLSX.writeFile(
      wb,
      `users-report-${adminName}-${date.toISOString().slice(0, 10)}.xlsx`
    );
  };

  return (
    <button
      onClick={generateExcel}
      className="flex items-center gap-2 px-4 py-2 text-white transition-colors bg-green-600 rounded-lg hover:bg-green-700"
    >
      <FaFileExcel /> Export Excel
    </button>
  );
};
